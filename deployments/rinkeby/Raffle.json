{
  "address": "0xf438Af88dfd78Dd3d34cA8524911346E023F21Ef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "indexedWinner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x209648e684e7f765d1604fd95d444b6c87c058c147921e3ed88d09b1fc22d2fb",
  "receipt": {
    "to": null,
    "from": "0xf09ac2EfB184f390D3507784f788422F4DdC5C95",
    "contractAddress": "0xf438Af88dfd78Dd3d34cA8524911346E023F21Ef",
    "transactionIndex": 51,
    "gasUsed": "1233028",
    "logsBloom": "0x
    "blockHash": "0x3129c83e6516c86415ac8308b262dcd5312ebcf12d386bc4143f61faa3734994",
    "transactionHash": "0x209648e684e7f765d1604fd95d444b6c87c058c147921e3ed88d09b1fc22d2fb",
    "logs": [],
    "blockNumber": 11283175,
    "cumulativeGasUsed": "12807937",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "20792",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "1569a9533c47835655f1078f5871d901",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexedWinner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"this implements chainlink vrf v2 and chainlink keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample raffle contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"checks whether random number/'word' should be requested from chainlink \"},\"enterRaffle()\":{\"notice\":\"events are written to the EVM log data structure the evm log is not directly accessible by contracts\"},\"performUpkeep(bytes)\":{\"notice\":\"requests random number from chainlink \"}},\"notice\":\"This contract is for creating an untamperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n/* enter the lottery */\\n/* pick a random winner */\\n/* winner selected randomly every x minutes */\\n// chainlink oracle - for random functionality(chainlink keepers)\\n\\n/*\\n=> VRF - Verifiable Random Function - a provably fair and verifiable random number \\ngenerator (RNG) that enables smart contracts to access random values without \\ncompromising security or usability\\n=> block.timestamp - timestamp(since epoch) that the current block was mined\\n=> gas lane - sets the maximum amount of gas to be spent for a given request\\n*/\\n\\nerror Raffle__NotEnoughEthEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n  uint256 currentBalance,\\n  uint256 numPlayers,\\n  uint256 raffleState\\n);\\n\\n/**\\n * @title A sample raffle contract\\n * @notice This contract is for creating an untamperable decentralized smart contract\\n * @dev this implements chainlink vrf v2 and chainlink keepers\\n */\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n  /* type declarations */\\n  enum RaffleState {\\n    OPEN,\\n    CALCULATING\\n  }\\n\\n  /* state variables */\\n  uint256 private immutable i_entranceFee;\\n  address payable[] private s_players;\\n  VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n  bytes32 private immutable i_gasLane;\\n  uint64 private immutable i_subscriptionId;\\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n  uint32 private immutable i_callbackGasLimit;\\n  uint32 private constant NUM_WORDS = 1;\\n  // lotto variables\\n  address private s_recentWinner;\\n  RaffleState private s_raffleState;\\n  uint256 private s_lastTimeStamp;\\n  uint256 private immutable i_interval;\\n\\n  /* events */\\n  // common way to write events is the function name in reverse\\n  event RaffleEnter(address indexed player);\\n  event RequestedRaffleWinner(uint256 indexed requestId);\\n  event WinnerPicked(address indexedWinner);\\n\\n  constructor(\\n    address vrfCoordinatorV2,\\n    uint256 entranceFee, // amount required to buy raffle\\n    bytes32 gasLane, // sets ceiling of gwei to be used\\n    uint64 subscriptionId, // for funding the vrf request\\n    uint32 callbackGasLimit,\\n    uint256 interval\\n  ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n    i_entranceFee = entranceFee;\\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    i_gasLane = gasLane;\\n    i_subscriptionId = subscriptionId;\\n    i_callbackGasLimit = callbackGasLimit;\\n    s_raffleState = RaffleState.OPEN;\\n    s_lastTimeStamp = block.timestamp;\\n    i_interval = interval;\\n  }\\n\\n  /**\\n   * events are written to the EVM log data structure\\n   * the evm log is not directly accessible by contracts\\n   */\\n  function enterRaffle() public payable {\\n    if (msg.value < i_entranceFee) {\\n      revert Raffle__NotEnoughEthEntered();\\n    }\\n    if (s_raffleState != RaffleState.OPEN) {\\n      revert Raffle__NotOpen();\\n    }\\n    s_players.push(payable(msg.sender));\\n    emit RaffleEnter(msg.sender);\\n  }\\n\\n  /** checks whether random number/'word' should be requested from chainlink */\\n  function checkUpkeep(\\n    bytes memory /* checkData */\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory /* performData */\\n    )\\n  {\\n    // open\\n    // enough time has passed\\n    // enough players\\n    bool isOpen = (s_raffleState == RaffleState.OPEN);\\n    bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n    bool hasPlayers = (s_players.length > 0);\\n    bool hasBalance = address(this).balance > 0;\\n    upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n  }\\n\\n  /** requests random number from chainlink */\\n  function performUpkeep(\\n    bytes calldata /* performData */\\n  ) external override {\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n    if (!upkeepNeeded) {\\n      revert Raffle__UpkeepNotNeeded(\\n        address(this).balance,\\n        s_players.length,\\n        uint256(s_raffleState)\\n      );\\n    }\\n    s_raffleState = RaffleState.CALCULATING;\\n    // request rand num\\n    // pick winner using the generated number\\n    // 2 transaction process to prevent manipulation\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n      i_gasLane, // maximum gas price you are willing to pay for a request in wei\\n      i_subscriptionId, // for funding requests\\n      REQUEST_CONFIRMATIONS, // number of block confirmations to wait before responding\\n      i_callbackGasLimit, // limit of gas one is willing to use per request\\n      NUM_WORDS // number of random numbers to request\\n    );\\n    emit RequestedRaffleWinner(requestId);\\n  }\\n\\n  /**\\n   * picks a random winner\\n   *\\n   * override = override a function defined in a parent\\n   */\\n  function fulfillRandomWords(\\n    uint256, /*requestId*/\\n    uint256[] memory randomWords\\n  ) internal override {\\n    uint256 indexOfWinner = randomWords[0] % s_players.length;\\n    address payable recentWinner = s_players[indexOfWinner];\\n    s_recentWinner = recentWinner;\\n    s_raffleState = RaffleState.OPEN;\\n    s_players = new address payable[](0);\\n    s_lastTimeStamp = block.timestamp;\\n    (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n    if (!success) {\\n      revert Raffle__TransferFailed();\\n    }\\n    emit WinnerPicked(recentWinner);\\n  }\\n\\n  /* view/pure functions */\\n  function getEntranceFee() public view returns (uint256) {\\n    return i_entranceFee;\\n  }\\n\\n  function getPlayer(uint256 index) public view returns (address) {\\n    return s_players[index];\\n  }\\n\\n  function getRecentWinner() public view returns (address) {\\n    return s_recentWinner;\\n  }\\n\\n  function getRaffleState() public view returns (RaffleState) {\\n    return s_raffleState;\\n  }\\n\\n  function getNumWords() public pure returns (uint32) {\\n    return NUM_WORDS;\\n  }\\n\\n  function getNumberOfPlayers() public view returns (uint256) {\\n    return s_players.length;\\n  }\\n\\n  function getLastTimeStamp() public view returns (uint256) {\\n    return s_lastTimeStamp;\\n  }\\n\\n  function getRequestConfirmations() public pure returns (uint256) {\\n    return REQUEST_CONFIRMATIONS;\\n  }\\n\\n  function getInterval() public view returns (uint256) {\\n    return i_interval;\\n  }\\n}\\n\",\"keccak256\":\"0x9ca83e82ffa462fd4eb3413ea1c4bac40575ad85221419c02620db6015580836\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620018a1380380620018a18339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426002819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516114ba620003e7600039600081816107e501526108530152600061069b01526000610678015260006106570152600061061b0152600081816102fa01526103f7015260008181610337015261038b01526114ba6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e9919061106f565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190611054565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e1e565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610d2e565b610564565b005b34801561018557600080fd5b5061018e610763565b60405161019b9190610f72565b60405180910390f35b3480156101b057600080fd5b506101b961078d565b6040516101c691906110c1565b60405180910390f35b3480156101db57600080fd5b506101e4610796565b6040516101f1919061106f565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610d7b565b6107a3565b60405161022f929190610fd1565b60405180910390f35b34801561024457600080fd5b5061024d61084f565b60405161025a919061106f565b60405180910390f35b34801561026f57600080fd5b50610278610877565b604051610285919061106f565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190610dc4565b610881565b6040516102c29190610f72565b60405180910390f35b3480156102d757600080fd5b506102e06108c8565b6040516102ed919061106f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190610fa8565b60405180910390fd5b6103f182826108d4565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104635761046261139a565b5b600160149054906101000a900460ff1660018111156104855761048461139a565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e604051806020016040528060008152506107a3565b509050806105ed5747600080549050600160149054906101000a900460ff1660018111156105af576105ae61139a565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e49392919061108a565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106125761061161139a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dc959493929190611001565b602060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190610df1565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b6000600361ffff16905090565b6000606060008060018111156107bc576107bb61139a565b5b600160149054906101000a900460ff1660018111156107de576107dd61139a565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108129190611185565b119050600080600080549050119050600080471190508380156108325750825b801561083b5750815b80156108445750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b6000808281548110610896576108956113c9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108ef576108ee6113c9565b5b6020026020010151610901919061130b565b90506000808281548110610918576109176113c9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109ac576109ab61139a565b5b0217905550600067ffffffffffffffff8111156109cc576109cb6113f8565b5b6040519080825280602002602001820160405280156109fa5781602001602082028036833780820191505090505b5060009080519060200190610a10929190610af9565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a3e90610f5d565b60006040518083038185875af1925050503d8060008114610a7b576040519150601f19603f3d011682016040523d82523d6000602084013e610a80565b606091505b5050905080610abb576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610aea9190610f8d565b60405180910390a15050505050565b828054828255906000526020600020908101928215610b72579160200282015b82811115610b715782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b19565b5b509050610b7f9190610b83565b5090565b5b80821115610b9c576000816000905550600101610b84565b5090565b6000610bb3610bae84611101565b6110dc565b90508083825260208201905082856020860282011115610bd657610bd5611431565b5b60005b85811015610c065781610bec8882610d04565b845260208401935060208301925050600181019050610bd9565b5050509392505050565b6000610c23610c1e8461112d565b6110dc565b905082815260208101848484011115610c3f57610c3e611436565b5b610c4a848285611298565b509392505050565b600082601f830112610c6757610c6661142c565b5b8135610c77848260208601610ba0565b91505092915050565b60008083601f840112610c9657610c9561142c565b5b8235905067ffffffffffffffff811115610cb357610cb2611427565b5b602083019150836001820283011115610ccf57610cce611431565b5b9250929050565b600082601f830112610ceb57610cea61142c565b5b8135610cfb848260208601610c10565b91505092915050565b600081359050610d138161146d565b92915050565b600081519050610d288161146d565b92915050565b60008060208385031215610d4557610d44611440565b5b600083013567ffffffffffffffff811115610d6357610d6261143b565b5b610d6f85828601610c80565b92509250509250929050565b600060208284031215610d9157610d90611440565b5b600082013567ffffffffffffffff811115610daf57610dae61143b565b5b610dbb84828501610cd6565b91505092915050565b600060208284031215610dda57610dd9611440565b5b6000610de884828501610d04565b91505092915050565b600060208284031215610e0757610e06611440565b5b6000610e1584828501610d19565b91505092915050565b60008060408385031215610e3557610e34611440565b5b6000610e4385828601610d04565b925050602083013567ffffffffffffffff811115610e6457610e6361143b565b5b610e7085828601610c52565b9150509250929050565b610e8381611250565b82525050565b610e92816111b9565b82525050565b610ea1816111cb565b82525050565b610eb0816111d7565b82525050565b6000610ec18261115e565b610ecb8185611169565b9350610edb8185602086016112a7565b610ee481611445565b840191505092915050565b610ef881611262565b82525050565b6000610f0b60008361117a565b9150610f1682611456565b600082019050919050565b610f2a816111f4565b82525050565b610f3981611222565b82525050565b610f488161122c565b82525050565b610f578161123c565b82525050565b6000610f6882610efe565b9150819050919050565b6000602082019050610f876000830184610e89565b92915050565b6000602082019050610fa26000830184610e7a565b92915050565b6000604082019050610fbd6000830185610e89565b610fca6020830184610e89565b9392505050565b6000604082019050610fe66000830185610e98565b8181036020830152610ff88184610eb6565b90509392505050565b600060a0820190506110166000830188610ea7565b6110236020830187610f4e565b6110306040830186610f21565b61103d6060830185610f3f565b61104a6080830184610f3f565b9695505050505050565b60006020820190506110696000830184610eef565b92915050565b60006020820190506110846000830184610f30565b92915050565b600060608201905061109f6000830186610f30565b6110ac6020830185610f30565b6110b96040830184610f30565b949350505050565b60006020820190506110d66000830184610f3f565b92915050565b60006110e66110f7565b90506110f282826112da565b919050565b6000604051905090565b600067ffffffffffffffff82111561111c5761111b6113f8565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611148576111476113f8565b5b61115182611445565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061119082611222565b915061119b83611222565b9250828210156111ae576111ad61133c565b5b828203905092915050565b60006111c482611202565b9050919050565b60008115159050919050565b6000819050919050565b60008190506111ef82611459565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061125b82611274565b9050919050565b600061126d826111e1565b9050919050565b600061127f82611286565b9050919050565b600061129182611202565b9050919050565b82818337600083830152505050565b60005b838110156112c55780820151818401526020810190506112aa565b838111156112d4576000848401525b50505050565b6112e382611445565b810181811067ffffffffffffffff82111715611302576113016113f8565b5b80604052505050565b600061131682611222565b915061132183611222565b9250826113315761133061136b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061146a5761146961139a565b5b50565b61147681611222565b811461148157600080fd5b5056fea2646970667358221220e197c20e619ce76e03a327ba72e6d4dac3c12fd9f8781467eed458bd1249bacb64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e9919061106f565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190611054565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e1e565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610d2e565b610564565b005b34801561018557600080fd5b5061018e610763565b60405161019b9190610f72565b60405180910390f35b3480156101b057600080fd5b506101b961078d565b6040516101c691906110c1565b60405180910390f35b3480156101db57600080fd5b506101e4610796565b6040516101f1919061106f565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610d7b565b6107a3565b60405161022f929190610fd1565b60405180910390f35b34801561024457600080fd5b5061024d61084f565b60405161025a919061106f565b60405180910390f35b34801561026f57600080fd5b50610278610877565b604051610285919061106f565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190610dc4565b610881565b6040516102c29190610f72565b60405180910390f35b3480156102d757600080fd5b506102e06108c8565b6040516102ed919061106f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190610fa8565b60405180910390fd5b6103f182826108d4565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104635761046261139a565b5b600160149054906101000a900460ff1660018111156104855761048461139a565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e604051806020016040528060008152506107a3565b509050806105ed5747600080549050600160149054906101000a900460ff1660018111156105af576105ae61139a565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e49392919061108a565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106125761061161139a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dc959493929190611001565b602060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190610df1565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b6000600361ffff16905090565b6000606060008060018111156107bc576107bb61139a565b5b600160149054906101000a900460ff1660018111156107de576107dd61139a565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108129190611185565b119050600080600080549050119050600080471190508380156108325750825b801561083b5750815b80156108445750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b6000808281548110610896576108956113c9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108ef576108ee6113c9565b5b6020026020010151610901919061130b565b90506000808281548110610918576109176113c9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109ac576109ab61139a565b5b0217905550600067ffffffffffffffff8111156109cc576109cb6113f8565b5b6040519080825280602002602001820160405280156109fa5781602001602082028036833780820191505090505b5060009080519060200190610a10929190610af9565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a3e90610f5d565b60006040518083038185875af1925050503d8060008114610a7b576040519150601f19603f3d011682016040523d82523d6000602084013e610a80565b606091505b5050905080610abb576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610aea9190610f8d565b60405180910390a15050505050565b828054828255906000526020600020908101928215610b72579160200282015b82811115610b715782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b19565b5b509050610b7f9190610b83565b5090565b5b80821115610b9c576000816000905550600101610b84565b5090565b6000610bb3610bae84611101565b6110dc565b90508083825260208201905082856020860282011115610bd657610bd5611431565b5b60005b85811015610c065781610bec8882610d04565b845260208401935060208301925050600181019050610bd9565b5050509392505050565b6000610c23610c1e8461112d565b6110dc565b905082815260208101848484011115610c3f57610c3e611436565b5b610c4a848285611298565b509392505050565b600082601f830112610c6757610c6661142c565b5b8135610c77848260208601610ba0565b91505092915050565b60008083601f840112610c9657610c9561142c565b5b8235905067ffffffffffffffff811115610cb357610cb2611427565b5b602083019150836001820283011115610ccf57610cce611431565b5b9250929050565b600082601f830112610ceb57610cea61142c565b5b8135610cfb848260208601610c10565b91505092915050565b600081359050610d138161146d565b92915050565b600081519050610d288161146d565b92915050565b60008060208385031215610d4557610d44611440565b5b600083013567ffffffffffffffff811115610d6357610d6261143b565b5b610d6f85828601610c80565b92509250509250929050565b600060208284031215610d9157610d90611440565b5b600082013567ffffffffffffffff811115610daf57610dae61143b565b5b610dbb84828501610cd6565b91505092915050565b600060208284031215610dda57610dd9611440565b5b6000610de884828501610d04565b91505092915050565b600060208284031215610e0757610e06611440565b5b6000610e1584828501610d19565b91505092915050565b60008060408385031215610e3557610e34611440565b5b6000610e4385828601610d04565b925050602083013567ffffffffffffffff811115610e6457610e6361143b565b5b610e7085828601610c52565b9150509250929050565b610e8381611250565b82525050565b610e92816111b9565b82525050565b610ea1816111cb565b82525050565b610eb0816111d7565b82525050565b6000610ec18261115e565b610ecb8185611169565b9350610edb8185602086016112a7565b610ee481611445565b840191505092915050565b610ef881611262565b82525050565b6000610f0b60008361117a565b9150610f1682611456565b600082019050919050565b610f2a816111f4565b82525050565b610f3981611222565b82525050565b610f488161122c565b82525050565b610f578161123c565b82525050565b6000610f6882610efe565b9150819050919050565b6000602082019050610f876000830184610e89565b92915050565b6000602082019050610fa26000830184610e7a565b92915050565b6000604082019050610fbd6000830185610e89565b610fca6020830184610e89565b9392505050565b6000604082019050610fe66000830185610e98565b8181036020830152610ff88184610eb6565b90509392505050565b600060a0820190506110166000830188610ea7565b6110236020830187610f4e565b6110306040830186610f21565b61103d6060830185610f3f565b61104a6080830184610f3f565b9695505050505050565b60006020820190506110696000830184610eef565b92915050565b60006020820190506110846000830184610f30565b92915050565b600060608201905061109f6000830186610f30565b6110ac6020830185610f30565b6110b96040830184610f30565b949350505050565b60006020820190506110d66000830184610f3f565b92915050565b60006110e66110f7565b90506110f282826112da565b919050565b6000604051905090565b600067ffffffffffffffff82111561111c5761111b6113f8565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611148576111476113f8565b5b61115182611445565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061119082611222565b915061119b83611222565b9250828210156111ae576111ad61133c565b5b828203905092915050565b60006111c482611202565b9050919050565b60008115159050919050565b6000819050919050565b60008190506111ef82611459565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061125b82611274565b9050919050565b600061126d826111e1565b9050919050565b600061127f82611286565b9050919050565b600061129182611202565b9050919050565b82818337600083830152505050565b60005b838110156112c55780820151818401526020810190506112aa565b838111156112d4576000848401525b50505050565b6112e382611445565b810181811067ffffffffffffffff82111715611302576113016113f8565b5b80604052505050565b600061131682611222565b915061132183611222565b9250826113315761133061136b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061146a5761146961139a565b5b50565b61147681611222565b811461148157600080fd5b5056fea2646970667358221220e197c20e619ce76e03a327ba72e6d4dac3c12fd9f8781467eed458bd1249bacb64736f6c63430008070033",
  "devdoc": {
    "details": "this implements chainlink vrf v2 and chainlink keepers",
    "kind": "dev",
    "methods": {},
    "title": "A sample raffle contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "checks whether random number/'word' should be requested from chainlink "
      },
      "enterRaffle()": {
        "notice": "events are written to the EVM log data structure the evm log is not directly accessible by contracts"
      },
      "performUpkeep(bytes)": {
        "notice": "requests random number from chainlink "
      }
    },
    "notice": "This contract is for creating an untamperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 214,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 217,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)192"
      },
      {
        "astId": 219,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)192": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}